Instalei o SQLite3 no disco local D (Só extrair e colocar ele nas variáveis de ambiente PATH)
Vou usar o commonJS porque o algumas ferramentas do Sequelize (linha de comando) está mais adaptada para o CJS além de estar pareada com a documentação
Sequelize é um ORM (Object-Relational Mapping)
Luri:
    "Scaffold" é mais específico para a estrutura básica de um projeto, como a que o Sequelize cria. Ele fornece as pastas e arquivos essenciais para você começar a trabalhar.
    "Bootstrap" é um termo mais amplo que se refere a qualquer processo que ajuda a iniciar um projeto rapidamente. Isso pode incluir a criação de uma estrutura básica, como o "scaffold", mas também pode incluir a instalação de dependências, a configuração de um ambiente de desenvolvimento ou a criação de um protótipo inicial.
    Então, podemos dizer que o "scaffold" é uma parte do "bootstrap" no contexto da aula. O "bootstrap" é o processo geral de iniciar o projeto, e o "scaffold" é uma etapa específica desse processo que cria a estrutura básica.
.sequelizerc porque não vou deixar as pastas criadas pelo sequelize-cli na pasta raiz, joguei elas em src
Nesta aula, você aprendeu:
• O que são ORMs e os motivos pelos quais são utilizados no dia a dia do desenvolvimento back-end;
• As diferenças entre utilizar SQL diretamente em um código JavaScript e utilizar os métodos de um ORM para fazer a mesma tarefa;
• Como utilizar o sequelize-cli, ferramenta de linha de comando do Sequelize, para gerar a base de um projeto como ponto de partida;
• Como instalar e configurar o Sequelize através dos arquivos próprios de configuração;
• Como utilizar o Sequelize para conectar a API a uma base de dados.
------------------------------------------------------------------------------------------------------------------------------------------------------------

Criar modelo: npx sequelize-cli model:generate --name Person --attributes name:string,email:string,tax_id:string,active:boolean,role:string
Para previnir que o nome do modelo se misture com o nome da tabela, coloquei a propriedade tableName dentro do modelo de Pessoa, falando que minha tabela vai se chamar pessoas. 
    O bom de fazer isso é que o sequelize tenta plurarizar meus modelos para encontrar as tabelas, que as vezes pode ser equivocado
Eu nomeei como Person porque é o padrão do JavaScript (Classes com letra Maiuscula e no singular).
Com isso, dentro da pasta "migration" eu preciso mudar o nome da tabela associada também
Luri:
    O Pessoa se refere ao modelo que criamos no Sequelize, que é uma representação da nossa tabela no código. 
    Já pessoas se refere à tabela que será criada no nosso banco de dados SQLite.
    É como se o Pessoa fosse um mapa que nos ajuda a encontrar a tabela pessoas no banco de dados.

Modelo é uma camada que faz a representação dos dados na API
Migração em SQL: Transferência de dados entre plataformas
Migração em ORM: Alterações incrementais e rastreáveis no banco (Como o git para programar)
    Coordenar alterções feitas nas tabelas no banco
    Rastrear alterções feitas no banco
Estruturar de criar modelos e migrar: https://sequelize.org/docs/v6/other-topics/migrations/
Para abrir o banco de dados, pode ser no VSCode (CTRL + SHIFT + P -->SQLite: Open database)
Para popular minhas tabelas com dados aleatórios para desenvolvimento, populo com seed (npx sequelize-cli seed:generate --name demo-pessoa)
    Usar a estrutura base para entender como popular em bulk
Luri:
    npm é usado para instalar pacotes, enquanto o npx é usado para executar comandos de pacotes que já estão instalados
    Com npm, para executar o comando seed:generate do sequelize-cli, você teria que digitar: npm bin/sequelize-cli seed:generate
Para popular minha tabela: npx sequelize-cli db:seed:all (Já que tenho só um seed, todos = único)

Nesta aula, você aprendeu:
    O que são modelos e como os modelos representam e mapeiam os dados de tabelas correspondentes no banco;
    Como automatizar a criação de modelos a partir do sequelize-cli;
    O que são tipos de dados em SQL e como o Sequelize adapta os tipos de dados de diversos bancos;
    O que são migrações no contexto de ORMs e como utilizar as migrações para fazer mudanças rastreáveis e incrementais no banco de dados;
    O que são seeds e como utilizar o sequelize-cli para criar arquivos de seed e também para popular o banco com dados de teste.
------------------------------------------------------------------------------------------------------------------------------------------------------------

Padrão MVC - Model View Controler (Padrão de desenvolvimento)
    Controller é o que faz o meio de campo entre Model e a aplicação (Pegando as requisições)
    Cada etapa (Cliente requere dados na Route, Da route para o Controller...) é uma camada
    O model faz a manipulação dos dados;
    O controller age como intermediário entre o modelo e as camadas de visualização;
    O view trata do output das informações.
Cada modelo vem com métodos próprios que o próprio Sequelize disponibiliza, basta eu acessar através do arquivo index.js da pasta models e usar o nome do modelo como método e usar as querys. Exemplo: database.Person.findAll()
Mais em: https://sequelize.org/docs/v6/core-concepts/model-querying-basics/
Services é uma camada intermediária ao MVC
    REsponsável por aplicar regras aos modelos